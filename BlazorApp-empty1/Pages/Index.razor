@page "/"
@using ClassLibrary1.Input;
@using System.Text.Json;
@using ClassLibrary1;

@inject IJSRuntime _jsRuntime;
@inject IGameLooper _gameLooper;
@inject IKeyReporter _keyReporter;
@inject Canvas2DContextState _canvas2DContextState;
@inject ElementReferenceState _elementReferenceState;

<div id="canvasContainer" @onkeyup="OnKeyUp">
    <BECanvas @ref="_canvasRef" Width="256" Height="224" ></BECanvas>
</div>

<img  @ref="_demoSpritesRef" src="Images/BlazorFunPiskelDemo.png" hidden/>

@code {

    BECanvasComponent? _canvasRef = null;
    ElementReference _demoSpritesRef;

    /// <summary>
    /// Initialized the canvasses and creates the SnakeGame
    /// </summary>
    /// <param name="firstRender">Flag that identifies if this is the first render</param>
    /// <returns>A completed task</returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _canvas2DContextState.CanvasContext = await _canvasRef.CreateCanvas2DAsync();
        _elementReferenceState.State = _demoSpritesRef;
        await _jsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
    }

    /// <summary>
    /// This method will be called 60 times per second by the requestanimationframe from javascript.
    /// </summary>
    /// <param name="timeStamp">The current timestamp</param>
    /// <param name="width">The width of the canvas</param>
    /// <param name="height">The height of the canvas</param>
    /// <returns>A completed task</returns>
    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int width, int height)
    {
        await _gameLooper.GameLoop(timeStamp, width, height);
    }
    private void OnKeyUp(KeyboardEventArgs args)
    {
        _keyReporter.Report(
            new InputReport
            (
                KeyCode: JsonSerializer.Serialize(args),
                TimeStamp: 1f
            )
        );
    }

  

}